services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - kitcha_network

  broker:
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
    container_name: broker
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://broker:9092
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms512M"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server broker:9092 --list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - kitcha_network

  kafka-connect:
    build:
      context: .
      dockerfile: Dockerfile.kafka-connect
    depends_on:
      broker:
        condition: service_healthy
      mariadb:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    ports:
      - "8083:8083"
    container_name: kafka-connect
    environment:
      CONNECT_BOOTSTRAP_SERVERS: PLAINTEXT://broker:9092
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: "connect-cluster"
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_PLUGIN_PATH: "/usr/share/java/kafka-connect-jdbc,/usr/share/java/kafka-connect-mongodb"
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - ./connect-plugins/confluentinc-kafka-connect-jdbc-10.8.2/lib:/usr/share/java/kafka-connect-jdbc
      - ./connect-plugins/mongodb-kafka-connect-mongodb-1.15.0/lib:/usr/share/java/kafka-connect-mongodb
      - ./connectors:/kafka-connect/connectors
    networks:
      - kitcha_network
    
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    container_name: mysql
    volumes: 
      - mysql_data:/var/lib/mysql
      - /sys/fs/cgroup
    networks:
      - kitcha_network
    healthcheck:
      test: [ "CMD", "mysqladmin", "-u", "${MYSQL_USER}","-p${MYSQL_PASSWORD}", "ping", "-h", "localhost" ]
      interval: 5s
      timeout: 5s
      retries: 3
    ports:
      - "3308:3306"
    restart: on-failure

  config-server:
    build:
      context: https://github.com/InspireCampTeam3/Kitcha-BE.git
      # context: ./Kitcha-BE
      dockerfile: Config-server/Dockerfile
    container_name: config-server
    networks:
      - kitcha_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8071/actuator/health" ]
      interval: 5s
      timeout: 5s
      retries: 3
    expose:
      - "8071"
    restart: on-failure

  eureka:
    build:
      context: https://github.com/InspireCampTeam3/Kitcha-BE.git
      # context: ./Kitcha-BE
      dockerfile: eureka/Dockerfile
    container_name: eureka
    networks:
      - kitcha_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 5s
      timeout: 5s
      retries: 3
    ports:
      - "8761:8761"
    depends_on:
      config-server:
        condition: service_healthy
    restart: on-failure

  gateway-server:
    build:
      context: https://github.com/InspireCampTeam3/Kitcha-BE.git
      # context: ./Kitcha-BE
      dockerfile: API-Gateway/Dockerfile
    environment:
      TOKEN_SECRET: ${TOKEN_SECRET}
      FRONTEND_SERVER: ${FRONTEND_SERVER}
    container_name: gateway-server
    networks:
      - kitcha_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8072/actuator/health" ]
      interval: 5s
      timeout: 5s
      retries: 3
    ports:
      - "8072:8072"
    depends_on:
      config-server:
        condition: service_healthy
    restart: on-failure

  auth:
    build:
      context: https://github.com/InspireCampTeam3/Kitcha-Authentication.git
      # context: ./Kitcha-Authentication
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      TOKEN_SECRET: ${TOKEN_SECRET}
      TOKEN_EXPIRATION_TIME: ${TOKEN_EXPIRATION_TIME}
      TEST_USER_PASSWORD: ${TEST_USER_PASSWORD}
      TEST_ADMIN_PASSWORD: ${TEST_ADMIN_PASSWORD}
    container_name: auth
    networks:
      - kitcha_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8091/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 10
    expose:
      - "8091"
    depends_on:
      mysql:
        condition: service_healthy
      eureka:
        condition: service_healthy
      gateway-server:
        condition: service_healthy
    restart: on-failure

  interest:
    build:
      context: https://github.com/InspireCampTeam3/Kitcha-Interest.git
      # context: ./Kitcha-Interest
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    container_name: interest
    networks:
      - kitcha_network
    expose:
      - "8080"
    depends_on:
      mariadb:
        condition: service_healthy
      eureka:
        condition: service_healthy
      gateway-server:
        condition: service_healthy
    restart: on-failure

  mariadb:
    image: mariadb:10.6
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      TEST_USER_PASSWORD: ${TEST_USER_PASSWORD}
      TEST_ADMIN_PASSWORD: ${TEST_ADMIN_PASSWORD}
    container_name: mariadb
    networks:
      - kitcha_network
    volumes:
      - mariadb_data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "-u", "${MYSQL_USER}","-p${MYSQL_PASSWORD}", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 3
    ports:
      - "3307:3306"
    restart: on-failure

  mongodb:
    image: mongo:5.0
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    volumes:
      - mongo_data:/data/db
      - ./mongo-init/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    networks:
      - kitcha_network
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongo", "--username", "${MONGO_INITDB_ROOT_USERNAME}", "--password", "${MONGO_INITDB_ROOT_PASSWORD}", "--authenticationDatabase", "admin", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: on-failure

  file:
    build:
      context: https://github.com/InspireCampTeam3/Kitcha-File.git
      # context: ./Kitcha-File
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
    container_name: file
    networks:
      - kitcha_network
    expose:
      - "8080"
    depends_on:
      mysql:
        condition: service_healthy
      eureka:
        condition: service_healthy
      gateway-server:
        condition: service_healthy
    restart: on-failure

  article:
    build:
      context: https://github.com/InspireCampTeam3/Kitcha-Article.git
      # context: ./Kitcha-Article
    environment:
      NAVER_CLIENT_ID: ${NAVER_CLIENT_ID}
      NAVER_CLIENT_SECRET: ${NAVER_CLIENT_SECRET}
      GROQ_API_KEY: ${GROQ_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    container_name: article
    networks:
      - kitcha_network
    expose:
      - "8080"
    depends_on:
      mysql:
        condition: service_healthy
      eureka:
        condition: service_healthy
      gateway-server:
        condition: service_healthy
    restart: on-failure

  board:
    build:
      context: ./Kitcha-Board
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_DATABASE: ${MONGO_DATABASE}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
    container_name: board
    networks:
      - kitcha_network
    expose:
      - "8080"
    depends_on:
      mongodb:
        condition: service_healthy
      eureka:
        condition: service_healthy
      gateway-server:
        condition: service_healthy
    restart: on-failure

  frontend:
    build:
      context: https://github.com/InspireCampTeam3/Kitcha-FE.git
      # context: ./Kitcha-FE
      args:
        VITE_API_BASE_URL: ${VITE_API_BASE_URL}
    container_name: frontend
    ports:
      - "3000:80"
    depends_on:
      auth:
        condition: service_healthy
    restart: on-failure

volumes:
  mysql_data:
  mariadb_data:
  mongo_data:

networks:
  kitcha_network: